/*
 * Copyright (C) 2021 Oleg Ivashchenko <olegivo@gmail.com>
 *
 * This file is part of AFS.
 *
 * AFS is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * AFS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * AFS.
 */

buildscript {
    repositories {
        google()
    }

    dependencies {
        classpath 'com.google.firebase:firebase-appdistribution-gradle:2.1.3'
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
        classpath 'com.squareup.sqldelight:gradle-plugin:1.5.1'
    }
}

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.17'
    id 'com.github.ben-manes.versions' version '0.39.0'
}
repositories {
    mavenCentral()
    maven { url = "https://kotlin.bintray.com/kotlinx/" }
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.firebase.appdistribution'

apply plugin: 'com.google.firebase.crashlytics'

apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'com.squareup.sqldelight'

apply plugin: 'kotlinx-serialization'

ext.appId = "ru.olegivo.afs"

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId appId
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 8
        versionName "0.5.0"
        testInstrumentationRunner "ru.olegivo.afs.CustomAndroidJUnitRunner"
    }
    buildTypes {
        all {
            def apiAddress = "https://mobifitness.ru/"
            String debugMode
            Boolean firebasePerformanceEnabled = false

            switch (name) {
                case "debug":
                    debugMode = 'true'
                    applicationIdSuffix ".debug"
                    break
                case "release":
                    debugMode = 'false'
                    firebasePerformanceEnabled = true
                    break
            }

            buildConfigField "String", "API_URL", "\"${apiAddress}\""
            buildConfigField "String", "DB_NAME", "\"afs\""
            buildConfigField "Boolean", "DEBUG_MODE", debugMode

            firebaseAppDistribution {
                serviceCredentialsFile = "${projectDir}/firebase-app-distribution.json"
                def file = new File(serviceCredentialsFile)
                if (!file.exists()) println "firebaseAppDistribution.serviceCredentialsFile not exists: $serviceCredentialsFile"
                groups = "Alpha"
            }

            FirebasePerformance {
                instrumentationEnabled firebasePerformanceEnabled
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
        jvmTarget = "1.8"
        useIR = true
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.composeVersion
    }
    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/licenses/ASM'
        exclude("META-INF/*.kotlin_module")
        exclude "**/attach_hotspot_windows.dll"
    }
}

android.sourceSets {
    test {
        java.srcDirs += "$projectDir/src/testShared/java"
    }

    androidTest {
        java.srcDirs += "$projectDir/src/testShared/java"
    }
}

configurations.all {
    resolutionStrategy.force 'org.objenesis:objenesis:2.6'
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'androidx.arch.core'
                && !details.requested.name.contains('core-runtime')) {
            details.useVersion "2.0.1"
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    checkForGradleUpdate = false

    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(candidate.version)
    }

    // Example 2: disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    // Example 3: using the full syntax
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

dependencies {
    def assertJVersion = '3.20.2'
    def coroutinesVersion = "1.5.1"
    def daggerVersion = "2.38.1"
    def javaxInjectVersion = '1'
    def jUnitVersion = '4.13.2'
    def ktorVersion = "1.6.3"
    def mockitoVersion = '3.12.4'
    def moshiVersion = "1.12.0"
    def mockitoKotlinVersion = '2.2.0'
    def recyclerViewVersion = "1.2.1"
    def retrofitVersion = "2.9.0"
    def sqlDelightVersion = '1.5.1'
    def workVersion = "2.5.0"
    def androidXFragmentVersion = "1.3.6"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':shared')

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.fragment:fragment-ktx:$androidXFragmentVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation "androidx.work:work-runtime:$workVersion"
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation "androidx.work:work-rxjava2:$workVersion"

    // Compose
    implementation "androidx.compose.runtime:runtime:$rootProject.composeVersion"
    implementation "androidx.compose.ui:ui:$rootProject.composeVersion"
    implementation "androidx.compose.foundation:foundation:$rootProject.composeVersion"
    implementation "androidx.compose.foundation:foundation-layout:$rootProject.composeVersion"
    implementation "androidx.compose.material:material:$rootProject.composeVersion"
    implementation "androidx.compose.runtime:runtime-livedata:$rootProject.composeVersion"
    implementation "androidx.compose.ui:ui-tooling:$rootProject.composeVersion"

    implementation "com.google.android.material:compose-theme-adapter:$rootProject.materialComposeAdapterVersion"

    implementation "com.google.accompanist:accompanist-appcompat-theme:$rootProject.appCompatComposeAdapterVersion"

    implementation 'com.google.android.material:material:1.4.0'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf'

    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.4.2'

    implementation "com.squareup.cycler:cycler:0.1.9"

    implementation "com.squareup.moshi:moshi:${moshiVersion}"
    implementation "com.squareup.moshi:moshi-adapters:${moshiVersion}"
    implementation "com.squareup.moshi:moshi-kotlin:${moshiVersion}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation "com.squareup.sqldelight:android-driver:$sqlDelightVersion"
    implementation "com.squareup.sqldelight:rxjava2-extensions:$sqlDelightVersion"
    implementation "com.squareup.sqldelight:coroutines-extensions-jvm:$sqlDelightVersion"

    implementation "javax.inject:javax.inject:${javaxInjectVersion}"

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.3.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.2.2")

    implementation("io.ktor:ktor-client-core:$ktorVersion")
    implementation("io.ktor:ktor-client-cio:$ktorVersion")
    implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
    implementation("io.ktor:ktor-client-serialization:$ktorVersion")
    implementation("io.ktor:ktor-client-serialization-jvm:$ktorVersion")

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'


    implementation 'ru.terrakok.cicerone:cicerone:5.1.1'

    testImplementation "junit:junit:${jUnitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutinesVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "com.squareup.sqldelight:sqlite-driver:$sqlDelightVersion"
    //noinspection GradleDependency
    testImplementation('org.xerial:sqlite-jdbc:3.36.0.2') {
        // Override the version of sqlite used by sqlite-driver to match Android API 21
        force = true
    }

    debugImplementation("androidx.fragment:fragment-testing:$androidXFragmentVersion") {
        exclude group:'androidx.test', module:'monitor'
    }

    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$daggerVersion"

    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.2.1'

    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"

    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.11.0'

    androidTestImplementation "org.mockito:mockito-android:${mockitoVersion}"

    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutinesVersion}"

    androidTestImplementation "org.assertj:assertj-core:${assertJVersion}"
}

apply from: "${rootProject.projectDir}/kotlinter.gradle"

apply from: "jacoco.gradle"

apply from: "$rootDir/signing.gradle"

task staticAnalysis(
        dependsOn: [
                'lintKotlin',
                'detekt'
        ]) {
    group = 'verification'
}

task staticAnalysisFull(
        dependsOn: [
                'staticAnalysis',
                'lintDebug'
        ]) {
    group = 'verification'
}

apply plugin: 'com.google.gms.google-services'
