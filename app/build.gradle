buildscript {
    repositories {
        google()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    dependencies {
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.3.1'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'io.fabric.tools:gradle:1.31.2'
    }
}

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.13'
    id 'com.github.ben-manes.versions' version '0.27.0'
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.firebase.appdistribution'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ru.olegivo.afs"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.incremental": "true",
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }

        // used by Room, to test migrations
        sourceSets {
            androidTest.assets.srcDirs +=
                    files("$projectDir/schemas".toString())
        }
    }
    buildTypes {
        all {
            def apiAddress = "https://mobifitness.ru/"
            String debugMode

            switch (name) {
                case "debug":
                    debugMode = 'true'
                    break
                case "release":
                    debugMode = 'false'
                    break
            }

            buildConfigField "String", "API_URL", "\"${apiAddress}\""
            buildConfigField "String", "DB_NAME", "\"afs\""
            buildConfigField "Boolean", "DEBUG_MODE", debugMode

            firebaseAppDistribution {
                serviceCredentialsFile = "${projectDir}\\firebase-app-distribution.json"
                groups = "Alpha"
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

android.sourceSets {
    test {
        java.srcDirs += "$projectDir/src/testShared/java"
    }

    androidTest {
        java.srcDirs += "$projectDir/src/testShared/java"
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'androidx.arch.core'
                && !details.requested.name.contains('core-runtime')) {
            details.useVersion "2.0.1"
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    checkForGradleUpdate = false

    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(candidate.version)
    }

    // Example 2: disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    // Example 3: using the full syntax
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

dependencies {
    def assertJVersion = '3.14.0'
    def daggerVersion = "2.25.4"
    def daggerAssistVersion = "0.5.2"
    def javaxInjectVersion = '1'
    def jUnitVersion = '4.13'
    def mockitoVersion = '3.2.4'
    def moshiVersion = "1.9.2"
    def mockitoKotlinVersion = '2.2.0'
    def recyclerViewVersion = "1.1.0"
    def retrofitVersion = "2.7.1"
    def roomVersion = "2.2.3"
    def workVersion = "2.3.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.fragment:fragment-ktx:1.2.0'
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation "androidx.work:work-runtime:$workVersion"
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation "androidx.work:work-rxjava2:$workVersion"
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$daggerAssistVersion"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$daggerAssistVersion"

    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation 'com.google.android.material:material:1.1.0-rc01'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation platform('com.google.firebase:firebase-bom:24.5.0')
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation "com.squareup.moshi:moshi:${moshiVersion}"
    implementation "com.squareup.moshi:moshi-adapters:${moshiVersion}"
    implementation "com.squareup.moshi:moshi-kotlin:${moshiVersion}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'

    implementation "javax.inject:javax.inject:${javaxInjectVersion}"

    implementation 'io.reactivex.rxjava2:rxjava:2.2.16'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    implementation 'net.danlew:android.joda:2.10.3'

    implementation 'ru.terrakok.cicerone:cicerone:5.0.0'

    testImplementation "junit:junit:${jUnitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"

    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"

    androidTestImplementation "org.assertj:assertj-core:${assertJVersion}"
}
