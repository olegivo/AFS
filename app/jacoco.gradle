/*
 * Copyright (C) 2020 Oleg Ivashchenko <olegivo@gmail.com>
 *
 * This file is part of AFS.
 *
 * AFS is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * AFS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * AFS.
 */

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.6"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            def excludes = []
            new File("${project.projectDir}/jacoco.ignore").eachLine { line ->
                if (!line.isEmpty() && !line.startsWith("//")) {
                    excludes << line
                }
            }

            def coverageSourceDirs = [
                    "src/main/java",
                    "src/$productFlavorName/java",
                    "src/$buildTypeName/java"
            ]

            def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}", excludes: excludes)
            def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}", excludes: excludes)
            def classDirs = files([debugTree], [kotlinDebugTree])
            def jacocoExecFile = "${project.buildDir}/jacoco/${testTaskName}.exec"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            def jacocoTestReportTaskName = "${testTaskName}Coverage"
            task "$jacocoTestReportTaskName"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                classDirectories.setFrom classDirs
                additionalSourceDirs.setFrom files(coverageSourceDirs)
                sourceDirectories.setFrom files(coverageSourceDirs)
                executionData.setFrom files(jacocoExecFile)

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }

            task "${jacocoTestReportTaskName}Verification"(type: JacocoCoverageVerification, dependsOn: "$jacocoTestReportTaskName") {
                group = "Verification"
                description = "Verifies Jacoco coverage reports on the ${sourceName.capitalize()} build."

                classDirectories.setFrom classDirs
                sourceDirectories.setFrom files(coverageSourceDirs)
                executionData.setFrom files(jacocoExecFile)

                violationRules {
                    setFailOnViolation(true)

                    rule {
                        element = 'CLASS'
                        includes = [
                                'ru.olegivo.afs.**.domain.*',
                                'ru.olegivo.afs.**.mapper*.*'
                        ]
                        enabled = true

                        limit {
                            value = 'COVEREDRATIO'
                            counter = 'BRANCH'
                            minimum = 0.8
                        }
                    }

                    rule {
                        element = 'CLASS'
                        includes = [
                                'ru.olegivo.afs.**.data.*',
                                'ru.olegivo.afs.**.network.*'
                        ]
                        enabled = true

                        limit {
                            value = 'COVEREDRATIO'
                            counter = 'BRANCH'
                            minimum = 0.7
                        }
                    }

                    rule {
                        element = 'CLASS'
                        includes = [
                                'ru.olegivo.afs.**.presentaion.*'
                        ]
                        enabled = true

                        limit {
                            value = 'COVEREDRATIO'
                            counter = 'BRANCH'
                            minimum = 0.9
                        }
                    }

                    rule {
                        element = 'CLASS'

                        limit {
                            value = 'COVEREDRATIO'
                            counter = 'INSTRUCTION'
                            minimum = 0.6
                        }
                    }

                    rule {
                        element = 'CLASS'
                        enabled = true

                        limit {
                            counter = 'CLASS'
                            value = 'MISSEDCOUNT'
                            maximum = 0
                        }
                    }
                }

            }
        }
    }
}